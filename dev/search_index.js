var documenterSearchIndex = {"docs":
[{"location":"#UnitTypes.jl","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This package provides physical units as Julia types.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> using UnitTypes\n\njulia> x = Meter(3)\n3m\n\njulia> typeof(x)\nMeter\n\njulia> typeof(x) <: AbstractLength\ntrue\n\njulia> typeof(x) <: AbstractCapacitance\nfalse","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This allows you to easily write functions with arguments restricted to variables having certain types.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> function goFaster(a::T) where T<:AbstractAcceleration end","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This leads to correctness and very clear error messages.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> goFaster(3u\"m/s\")\nERROR: MethodError: no method matching goFaster(::MeterPerSecond)\n\nClosest candidates are:\n  goFaster(::AbstractAcceleration)","category":"page"},{"location":"#Introducing-new-types","page":"UnitTypes.jl","title":"Introducing new types","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Macros are used to introduce and create relationships around new types:","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"@makeBaseMeasure Length Meter \"m\" - introduces a new basic Measure like Meter for Length or Meter3 Volume,\n@makeMeasure Meter(1000) = KiloMeter(1) \"km\" - derives a new measure (KiloMeter) from some an existing measure (Meter) with conversion ratio 1000m = 1m\n@makeDimension Diameter Meter - creates a Dimension, which is a Measure in some particular context, as diameter, radius, and circumference all refer to lengths of a circle.","category":"page"},{"location":"#Design","page":"UnitTypes.jl","title":"Design","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"UnitTypes introduces an abstract type hierarchy of:","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"AbstractMeasure\n├─ AbstractAcceleration\n│  └─ MeterPerSecond2\n├─ AbstractAngle\n│  ├─ Degree\n│  └─ Radian\n├─ AbstractArea\n│  ├─ Acre\n│  ├─ Meter2\n│  ├─ SquareFoot\n│  └─ SquareMile\n├...and so on","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"See docs/unitTypesTree.txt for the full tree of pre-defined types.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"The idea is that a Measure is some quantity bearing units, while a Dimension is some context-specific application of a Measure. Within a Dimension multiple Measures may logically be used as long as they are dimensionally consistent. For instance, a circle may be described by its radius, diameter, or circumference, concepts that can be interchangeably converted, using any Measure of extent (<:AbstractLength). A function creating a circle can then internally store radii while accepting Radius, Diameter, or Circumference arguments as the user prefers, since the type system provides conversion between the argument and the function's internal convention.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Internally, Dimensions look like","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"struct Diameter{T <: AbstractLength } <: AbstractDimension\n  value::T\nend","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"and a Measure is represented by","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"struct Meter <: AbstractLength\n  value::Number\n  toBase::Number\n  unit::String\nend","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"The macros in Measure.jl and Dimension.jl define the necessary convert()s and other operators. While these macros suffice for most units, defining nonlinear units (like temperature) requires adding some plumbing. See the temperature converts in Temperature.jl for an example.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Please open an issue with a minimal working example if you run into conversion errors. Please open an issue or PR to add more units.","category":"page"},{"location":"#Logical-operations","page":"UnitTypes.jl","title":"Logical operations","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Using units correctly requires distinguishing between valid and invalid operations, which in some cases means not allowing apparently convenient operations. Inches can be added, as can inch and millimeter, but only when computing area does inch*inch make sense. Inch * 3 is convenient while 3 / Inch is unlikely to be desirable. This is especially obvious in affine units like Temperature, where 0°C + 10°F = -12.2°C.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"With use, patience, and issues, these coherence rules will become more clear and explained by example.","category":"page"},{"location":"#Comparison-with-other-packages","page":"UnitTypes.jl","title":"Comparison with other packages","text":"","category":"section"},{"location":"#Unitful.jl","page":"UnitTypes.jl","title":"Unitful.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Unitful leverages parametric types to store units, giving flexibility at the cost of compile-time type uncertainty. It's two major limitations are the avoidance of angular measures, as they are not first-class entities but rather ratios, and rather lengthy type unions that clutter outputs, especially on error:","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> function goSlower(x<:Unitful.Acceleration) end\ngoSlower (generic function with 1 method)\n\njulia> goSlower(1u\"mm\")\nERROR: MethodError: no method matching goSlower(::Quantity{Int64, 𝐋 , Unitful.FreeUnits{(mm,), 𝐋 , nothing}})\n\nClosest candidates are:\n  goSlower(::T) where T<:(Union{Quantity{T, 𝐋 𝐓^-2, U}, Level{L, S, Quantity{T, 𝐋 𝐓^-2, U}} where {L, S}} where {T, U})","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"As Unitful is the dominant unit package and has wide use and support, we provide a separate package ExchangeUnitful to enable interoperation with Unitful.","category":"page"},{"location":"#DynamicQuantities.jl","page":"UnitTypes.jl","title":"DynamicQuantities.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"DynamicQuantities is newer and faster than Unitful because it \"defines a simple statically-typed Quantity type for storing physical units.\" It does this by storing the exponents on the basic units, allowing any unit traceable to SI to be used. But this performant representation hurts readability, and while the unit representation may be able to be hidden behind overrides of show(), Julia is designed for types to be read and manipulated directly by users.","category":"page"},{"location":"#UnitTypes.jl-2","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"In the presence of Julia's type-heavy UI, these two, good attempts feel misdirected and motivate this package's literal typing of units. The limitation is that UnitTypes does not have a catch-all unit representation. Only units that have been defined by one of the macros may be represented, and complex units may need to have additional methods written to correctly convert between units. See Temperature.jl for an example of manual unit conversion.","category":"page"},{"location":"#Docs","page":"UnitTypes.jl","title":"Docs","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"CurrentModule=UnitTypes","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"UnitTypes.Measure.@makeBaseMeasure\nUnitTypes.Measure.@makeMeasure\nUnitTypes.Measure.@relateMeasures","category":"page"},{"location":"#UnitTypes.Measure.@makeBaseMeasure","page":"UnitTypes.jl","title":"UnitTypes.Measure.@makeBaseMeasure","text":"macro makeBaseMeasure(quantityName, unitName, unitSymbol::String, isAffine=false)\n\nMake a new base measure which has no relationship to an existing unit.   For example, in @makeBaseMeasure Length Meter \"m\":\n\nquantityName is the name of the measure, 'Length' above.\nunitName is the name of the unit which will be used to make measures bearing that unit, 'Meter' above.\nunitSymbol is the abbreviation of the unit name, used in all string presentations of the measure.\nisAffine is normally false, if true the +-/* operations are not added for this and derived units and need to be added by hand.\n\nThe macro will introduce AbstractLength <: AbstractMeasure and Meter() into the current scope.\n\nMeasures created by the macro have fields:\n\nvalue::Number raw value of the measure\ntoBase::Number == 1 for base measures\nunit::String the unit to be displayed\n\nTo get the measure's value in the base unit as a float, see toBaseFloat().\n\n\n\n\n\n","category":"macro"},{"location":"#UnitTypes.Measure.@makeMeasure","page":"UnitTypes.jl","title":"UnitTypes.Measure.@makeMeasure","text":"macro makeMeasure(relation, unit=\"NoUnit\")\n\nCreates a new Measure from an existing base measure.   The left hand side of the equation must already exist, while the right hand side should be undefined, with the trailing string providing the unit symbol.\n\njulia   @makeMeasure Meter(1) = MilliMeter(1000) \"mm\"\n\nThe resulting types are defined in the containing module, not in UnitTypes, as seen by println(names(MyModule, all=true)).\n\n\n\n\n\n","category":"macro"},{"location":"#UnitTypes.Measure.@relateMeasures","page":"UnitTypes.jl","title":"UnitTypes.Measure.@relateMeasures","text":"Adds a multiplicative relationship between the left and right sides of the equation, allowing units to be multiplied and divided with consistent units.   All types must already be defined and only one * is supported on the left side, while the right should the resultant type.   julia     @relateMeasures Meter*Newton = NewtonMeter\n\n\n\n\n\n","category":"macro"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"UnitTypes.Measure.@makeDimension\nUnitTypes.Measure.@relateDimensions","category":"page"},{"location":"#Defined-units-and-other-functions:","page":"UnitTypes.jl","title":"Defined units and other functions:","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Modules=[UnitTypes]","category":"page"},{"location":"#UnitTypes.APerM","page":"UnitTypes.jl","title":"UnitTypes.APerM","text":"This UnitType represents a basic measure of APerM with units A/m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.APerM2","page":"UnitTypes.jl","title":"UnitTypes.APerM2","text":"This UnitType represents a basic measure of APerM2 with units A/m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Acre","page":"UnitTypes.jl","title":"UnitTypes.Acre","text":"UnitType Acre is derived from Meter2, related by 4046.873/1, with supertype AbstractArea, and unit ac.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ampere","page":"UnitTypes.jl","title":"UnitTypes.Ampere","text":"This UnitType represents a basic measure of Ampere with units A.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.BasisPoints","page":"UnitTypes.jl","title":"UnitTypes.BasisPoints","text":"UnitType BasisPoints is derived from Percent, related by 1/100, with supertype AbstractPercentage, and unit bps.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Candela","page":"UnitTypes.jl","title":"UnitTypes.Candela","text":"This UnitType represents a basic measure of Candela with units cd.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Celsius","page":"UnitTypes.jl","title":"UnitTypes.Celsius","text":"UnitType Celsius is derived from Kelvin, related by 0/0, with supertype AbstractTemperature, and unit °C.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.CentiMeter","page":"UnitTypes.jl","title":"UnitTypes.CentiMeter","text":"UnitType CentiMeter is derived from Meter, related by 1/100.0, with supertype AbstractLength, and unit cm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Coulomb","page":"UnitTypes.jl","title":"UnitTypes.Coulomb","text":"This UnitType represents a basic measure of Coulomb with units C.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Day","page":"UnitTypes.jl","title":"UnitTypes.Day","text":"UnitType Day is derived from Hour, related by 24/1, with supertype AbstractTime, and unit days.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Degree","page":"UnitTypes.jl","title":"UnitTypes.Degree","text":"UnitType Degree is derived from Radian, related by π/180, with supertype AbstractAngle, and unit °.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Fahrenheit","page":"UnitTypes.jl","title":"UnitTypes.Fahrenheit","text":"UnitType Fahrenheit is derived from Kelvin, related by 0/0, with supertype AbstractTemperature, and unit °F.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Farad","page":"UnitTypes.jl","title":"UnitTypes.Farad","text":"This UnitType represents a basic measure of Farad with units F.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.FemtoMeter","page":"UnitTypes.jl","title":"UnitTypes.FemtoMeter","text":"UnitType FemtoMeter is derived from Meter, related by 1/1.0e15, with supertype AbstractLength, and unit fm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.FluidOunce","page":"UnitTypes.jl","title":"UnitTypes.FluidOunce","text":"UnitType FluidOunce is derived from Meter3, related by 0.0284130625/1, with supertype AbstractVolume, and unit floz.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Foot","page":"UnitTypes.jl","title":"UnitTypes.Foot","text":"UnitType Foot is derived from Meter, related by 0.30479999999999996/1, with supertype AbstractLength, and unit ft.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.FootPerSecond","page":"UnitTypes.jl","title":"UnitTypes.FootPerSecond","text":"UnitType FootPerSecond is derived from MeterPerSecond, related by 0.30479999999999996/1, with supertype AbstractVelocity, and unit ft/s.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Gallon","page":"UnitTypes.jl","title":"UnitTypes.Gallon","text":"UnitType Gallon is derived from Meter3, related by 4.54609/1, with supertype AbstractVolume, and unit gal.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.GigaPascal","page":"UnitTypes.jl","title":"UnitTypes.GigaPascal","text":"UnitType GigaPascal is derived from Pascal, related by 1.0e9/1000.0, with supertype AbstractPressure, and unit GPa.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Henry","page":"UnitTypes.jl","title":"UnitTypes.Henry","text":"This UnitType represents a basic measure of Henry with units H.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Hertz","page":"UnitTypes.jl","title":"UnitTypes.Hertz","text":"This UnitType represents a basic measure of Hertz with units Hz.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Hour","page":"UnitTypes.jl","title":"UnitTypes.Hour","text":"UnitType Hour is derived from Minute, related by 60/1, with supertype AbstractTime, and unit hr.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Inch","page":"UnitTypes.jl","title":"UnitTypes.Inch","text":"UnitType Inch is derived from Meter, related by 0.0254/1, with supertype AbstractLength, and unit in.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Kelvin","page":"UnitTypes.jl","title":"UnitTypes.Kelvin","text":"This UnitType represents a basic measure of Kelvin with units °K.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KgPerM2","page":"UnitTypes.jl","title":"UnitTypes.KgPerM2","text":"This UnitType represents a basic measure of KgPerM2 with units kg/m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KgPerM3","page":"UnitTypes.jl","title":"UnitTypes.KgPerM3","text":"This UnitType represents a basic measure of KgPerM3 with units kg/m^3.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloGram","page":"UnitTypes.jl","title":"UnitTypes.KiloGram","text":"This UnitType represents a basic measure of KiloGram with units kg.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloMeter","page":"UnitTypes.jl","title":"UnitTypes.KiloMeter","text":"UnitType KiloMeter is derived from Meter, related by 1/0.001, with supertype AbstractLength, and unit km.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloNewton","page":"UnitTypes.jl","title":"UnitTypes.KiloNewton","text":"UnitType KiloNewton is derived from Newton, related by 1000.0/1, with supertype AbstractForce, and unit kN.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloOhm","page":"UnitTypes.jl","title":"UnitTypes.KiloOhm","text":"UnitType KiloOhm is derived from Ohm, related by 1000/1, with supertype AbstractResistance, and unit kΩ.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloPascal","page":"UnitTypes.jl","title":"UnitTypes.KiloPascal","text":"UnitType KiloPascal is derived from Pascal, related by 1000.0/1000.0, with supertype AbstractPressure, and unit KPa.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloVolt","page":"UnitTypes.jl","title":"UnitTypes.KiloVolt","text":"UnitType KiloVolt is derived from Volt, related by 1000/1, with supertype AbstractElectricPotential, and unit KV.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Liter","page":"UnitTypes.jl","title":"UnitTypes.Liter","text":"UnitType Liter is derived from Meter3, related by 1/1000.0, with supertype AbstractVolume, and unit L.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Lumen","page":"UnitTypes.jl","title":"UnitTypes.Lumen","text":"This UnitType represents a basic measure of Lumen with units lm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Lux","page":"UnitTypes.jl","title":"UnitTypes.Lux","text":"This UnitType represents a basic measure of Lux with units lx.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.M3PerKg","page":"UnitTypes.jl","title":"UnitTypes.M3PerKg","text":"This UnitType represents a basic measure of M3PerKg with units m^3/kg.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MegaOhm","page":"UnitTypes.jl","title":"UnitTypes.MegaOhm","text":"UnitType MegaOhm is derived from Ohm, related by 1.0e6/1, with supertype AbstractResistance, and unit MΩ.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MegaPascal","page":"UnitTypes.jl","title":"UnitTypes.MegaPascal","text":"UnitType MegaPascal is derived from Pascal, related by 1.0e6/1000.0, with supertype AbstractPressure, and unit MPa.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter","page":"UnitTypes.jl","title":"UnitTypes.Meter","text":"This UnitType represents a basic measure of Meter with units m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter2","page":"UnitTypes.jl","title":"UnitTypes.Meter2","text":"This UnitType represents a basic measure of Meter2 with units m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter3","page":"UnitTypes.jl","title":"UnitTypes.Meter3","text":"This UnitType represents a basic measure of Meter3 with units m^3.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MeterPerSecond","page":"UnitTypes.jl","title":"UnitTypes.MeterPerSecond","text":"This UnitType represents a basic measure of MeterPerSecond with units m/s.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MeterPerSecond2","page":"UnitTypes.jl","title":"UnitTypes.MeterPerSecond2","text":"This UnitType represents a basic measure of MeterPerSecond2 with units m/s^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MicroFarad","page":"UnitTypes.jl","title":"UnitTypes.MicroFarad","text":"UnitType MicroFarad is derived from Farad, related by 1/1.0e6, with supertype AbstractCapacitance, and unit μF.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MicroMeter","page":"UnitTypes.jl","title":"UnitTypes.MicroMeter","text":"UnitType MicroMeter is derived from Meter, related by 1/1.0e6, with supertype AbstractLength, and unit μm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Mile","page":"UnitTypes.jl","title":"UnitTypes.Mile","text":"UnitType Mile is derived from Meter, related by 1609.3439999999998/1, with supertype AbstractLength, and unit mi.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliFarad","page":"UnitTypes.jl","title":"UnitTypes.MilliFarad","text":"UnitType MilliFarad is derived from Farad, related by 1/1000.0, with supertype AbstractCapacitance, and unit mF.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliHenry","page":"UnitTypes.jl","title":"UnitTypes.MilliHenry","text":"UnitType MilliHenry is derived from Henry, related by 1/1000.0, with supertype AbstractInductance, and unit mH.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliLiter","page":"UnitTypes.jl","title":"UnitTypes.MilliLiter","text":"UnitType MilliLiter is derived from Liter, related by 1/1000.0, with supertype AbstractVolume, and unit mL.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliMeter","page":"UnitTypes.jl","title":"UnitTypes.MilliMeter","text":"UnitType MilliMeter is derived from Meter, related by 1/1000.0, with supertype AbstractLength, and unit mm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliNewton","page":"UnitTypes.jl","title":"UnitTypes.MilliNewton","text":"UnitType MilliNewton is derived from Newton, related by 1/1000.0, with supertype AbstractForce, and unit mN.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliNewtonMeter","page":"UnitTypes.jl","title":"UnitTypes.MilliNewtonMeter","text":"UnitType MilliNewtonMeter is derived from NewtonMeter, related by 1/1000.0, with supertype AbstractTorque, and unit mN*m.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliOhm","page":"UnitTypes.jl","title":"UnitTypes.MilliOhm","text":"UnitType MilliOhm is derived from Ohm, related by 1/1000, with supertype AbstractResistance, and unit Ω.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliSecond","page":"UnitTypes.jl","title":"UnitTypes.MilliSecond","text":"UnitType MilliSecond is derived from Second, related by 1/1000, with supertype AbstractTime, and unit ms.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Minute","page":"UnitTypes.jl","title":"UnitTypes.Minute","text":"UnitType Minute is derived from Second, related by 60/1, with supertype AbstractTime, and unit min.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NanoFarad","page":"UnitTypes.jl","title":"UnitTypes.NanoFarad","text":"UnitType NanoFarad is derived from Farad, related by 1/1.0e9, with supertype AbstractCapacitance, and unit nF.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NanoMeter","page":"UnitTypes.jl","title":"UnitTypes.NanoMeter","text":"UnitType NanoMeter is derived from Meter, related by 1/1.0e9, with supertype AbstractLength, and unit nm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NauticalMile","page":"UnitTypes.jl","title":"UnitTypes.NauticalMile","text":"UnitType NauticalMile is derived from Meter, related by 1852/1, with supertype AbstractLength, and unit nmi.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Newton","page":"UnitTypes.jl","title":"UnitTypes.Newton","text":"This UnitType represents a basic measure of Newton with units N.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NewtonMeter","page":"UnitTypes.jl","title":"UnitTypes.NewtonMeter","text":"This UnitType represents a basic measure of NewtonMeter with units N*m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NewtonMilliMeter","page":"UnitTypes.jl","title":"UnitTypes.NewtonMilliMeter","text":"UnitType NewtonMilliMeter is derived from NewtonMeter, related by 1/1000.0, with supertype AbstractTorque, and unit N*mm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ohm","page":"UnitTypes.jl","title":"UnitTypes.Ohm","text":"This UnitType represents a basic measure of Ohm with units Ω.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ounce","page":"UnitTypes.jl","title":"UnitTypes.Ounce","text":"UnitType Ounce is derived from KiloGram, related by 0.028349523125/1, with supertype AbstractMass, and unit oz.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Pascal","page":"UnitTypes.jl","title":"UnitTypes.Pascal","text":"This UnitType represents a basic measure of Pascal with units Pa.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PerSecond","page":"UnitTypes.jl","title":"UnitTypes.PerSecond","text":"UnitType PerSecond is derived from Hertz, related by 1/1, with supertype AbstractFrequency, and unit s^-1.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Percent","page":"UnitTypes.jl","title":"UnitTypes.Percent","text":"This UnitType represents a basic measure of Percent with units %.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PicoFarad","page":"UnitTypes.jl","title":"UnitTypes.PicoFarad","text":"UnitType PicoFarad is derived from Farad, related by 1/1.0e12, with supertype AbstractCapacitance, and unit pF.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PicoMeter","page":"UnitTypes.jl","title":"UnitTypes.PicoMeter","text":"UnitType PicoMeter is derived from Meter, related by 1/1.0e12, with supertype AbstractLength, and unit pm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Pint","page":"UnitTypes.jl","title":"UnitTypes.Pint","text":"UnitType Pint is derived from Meter3, related by 0.56826126/1, with supertype AbstractVolume, and unit pt.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PoundMass","page":"UnitTypes.jl","title":"UnitTypes.PoundMass","text":"UnitType PoundMass is derived from KiloGram, related by 0.45359237/1, with supertype AbstractMass, and unit lbm.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Quart","page":"UnitTypes.jl","title":"UnitTypes.Quart","text":"UnitType Quart is derived from Meter3, related by 1.1365225/1, with supertype AbstractVolume, and unit qt.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Radian","page":"UnitTypes.jl","title":"UnitTypes.Radian","text":"This UnitType represents a basic measure of Radian with units rad.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Rankine","page":"UnitTypes.jl","title":"UnitTypes.Rankine","text":"UnitType Rankine is derived from Kelvin, related by 0/0, with supertype AbstractTemperature, and unit °R.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Second","page":"UnitTypes.jl","title":"UnitTypes.Second","text":"This UnitType represents a basic measure of Second with units s.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Siemens","page":"UnitTypes.jl","title":"UnitTypes.Siemens","text":"This UnitType represents a basic measure of Siemens with units Ω^-1.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Slug","page":"UnitTypes.jl","title":"UnitTypes.Slug","text":"UnitType Slug is derived from KiloGram, related by 14.59390294/1, with supertype AbstractMass, and unit slug.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.SquareFoot","page":"UnitTypes.jl","title":"UnitTypes.SquareFoot","text":"UnitType SquareFoot is derived from Meter2, related by 0.09290303999999998/1, with supertype AbstractArea, and unit sqft.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.SquareMile","page":"UnitTypes.jl","title":"UnitTypes.SquareMile","text":"UnitType SquareMile is derived from Meter2, related by 2.5899881103359996e6/1, with supertype AbstractArea, and unit sqmi.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Tesla","page":"UnitTypes.jl","title":"UnitTypes.Tesla","text":"This UnitType represents a basic measure of Tesla with units T.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Volt","page":"UnitTypes.jl","title":"UnitTypes.Volt","text":"This UnitType represents a basic measure of Volt with units V.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Watt","page":"UnitTypes.jl","title":"UnitTypes.Watt","text":"This UnitType represents a basic measure of Watt with units W.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Weber","page":"UnitTypes.jl","title":"UnitTypes.Weber","text":"This UnitType represents a basic measure of Weber with units Wb.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Yard","page":"UnitTypes.jl","title":"UnitTypes.Yard","text":"UnitType Yard is derived from Meter, related by 0.9143999999999999/1, with supertype AbstractLength, and unit yd.\n\n\n\n\n\n\n\n","category":"type"},{"location":"#Base.show-Union{Tuple{T}, Tuple{IO, T}} where T<:AbstractDimension","page":"UnitTypes.jl","title":"Base.show","text":"@show functionality for Dimensions via dimension2String().\n\n\n\n\n\n","category":"method"},{"location":"#UnitTypes.dimension2String-Tuple{T} where T<:AbstractDimension","page":"UnitTypes.jl","title":"UnitTypes.dimension2String","text":"dimension2String(c::AbstractDimension) -> String\n\n\nReturns a string representing dimenson c with format Module.DimensionName(value unit).\n\n\n\n\n\n","category":"method"},{"location":"#UnitTypes.@makeDimension-Tuple{Any, Any}","page":"UnitTypes.jl","title":"UnitTypes.@makeDimension","text":"Make a new dimension dimName of measure; also creates 'AbstractdimName'\n\n```julia\n\n@makeDimension Diameter Meter \n\nd = Diameter(MilliMeter(3.4))\nr = Radius(d)\n\n```\n\n\n\n\n\n","category":"macro"},{"location":"#UnitTypes.@relateDimensions-Tuple{Any}","page":"UnitTypes.jl","title":"UnitTypes.@relateDimensions","text":"Defines various Base. functions that facilitate the given relationship.   All types must already be defined and written in the form type1 = factor * type2, as in:   julia     @relateDimensions Diameter = 2.0*Radius\n\n\n\n\n\n","category":"macro"}]
}
