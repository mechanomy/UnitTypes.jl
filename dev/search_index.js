var documenterSearchIndex = {"docs":
[{"location":"#UnitTypes.jl","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This package provides physical units as Julia types.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Repo","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> using UnitTypes\n\njulia> x = Meter(3)\n3m\n\njulia> typeof(x)\nMeter\n\njulia> typeof(x) <: AbstractLength\ntrue\n\njulia> typeof(x) <: AbstractCapacitance\nfalse","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This allows you to easily write functions with arguments restricted to variables having certain types.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> function goFaster(a::AbstractAcceleration) end","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"This leads to correctness and very clear error messages.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> v = MeterPerSecond(3)\n3m/s\n\njulia> goFaster(v)\nERROR: MethodError: no method matching goFaster(::MeterPerSecond)\n\nClosest candidates are:\n  goFaster(::AbstractAcceleration)","category":"page"},{"location":"#Design","page":"UnitTypes.jl","title":"Design","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"UnitTypes introduces an abstract type hierarchy of:","category":"page"},{"location":"#AbstractMeasure","page":"UnitTypes.jl","title":"AbstractMeasure","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Meter, MilliMeter, ..., MeterPerSecond, MeterPerSecond2, ... See src/SIDerived.jl\nInch, Foot, Mile, ..., See src/Imperial.jl","category":"page"},{"location":"#AbstractDimension","page":"UnitTypes.jl","title":"AbstractDimension","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"AbstractDiameter, AbstractRadius, ...\nAbstractDuration, ...,","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"In organizing types around AbstractMeasure and AbstractDimension, the idea is that a Measure is some quantity bearing units, while a Dimension is some context-specific application of a Measure. Within a Dimension multiple Measures may logically be used as long as they are dimensionally consistent. For instance, a circle may be described by its radius, diameter, or circumference, concepts that can be interchangeably converted, using any Measure of extent (<:AbstractLength). A function creating a circle can then internally store radii while accepting Radius, Diameter, or Circumference types, as the type system provides conversion between the argument and the function's internal representation.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Concrete Dimensions look like","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"struct Diameter{T <: AbstractLength } <: AbstractDimension\n  value::T\nend","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"and a concrete Measure is represented by","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"struct Meter <: AbstractLength\n  value::Number\n  toBase::Number\n  unit::String\nend","category":"page"},{"location":"#Introducing-new-types","page":"UnitTypes.jl","title":"Introducing new types","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Macros are used to introduce and create relationships around new types:","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"@makeBaseMeasure Torque NewtonMeter \"N*m\" - introduces a new basic Measure like Meter for Length or Meter3 for Volume,\n@deriveMeasure NewtonMeter(1) = MilliNewtonMeter(1000) \"mN*m - introduces a new name for a Measure, often a prefix like MilliMeter or an alternate name like Inch, \n@makeDimension Diameter Meter - creates a Dimension, which is a Measure in some particular context, as diameter, radius, and circumference all refer to lengths of a circle.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"The typeTree lists all of the currently-defined default types. See CommonDimensions for more example definitions.","category":"page"},{"location":"#Logical-operations","page":"UnitTypes.jl","title":"Logical operations","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Using units correctly requires distinguishing between valid and invalid operations, which in some cases means not allowing convenient operations. Inches can be added, as can inch and millimeter, but only when computing area does inch*inch make sense. Inch * 3 is convenient while 3 / Inch is unlikely to be desirable.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"At any time, .value can be used to access the within-type numerical value, while .toBase provides the conversion factor to the unit's base quantity. If a = MilliMeter(1), a.value => 1 while a.toBase => 1000 and Meter(a).value => 0.001 For b = Inch(144), b.value = 144, while b.toBase => 0.0254 since Meter is the base unit of all Lengths.","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"The macros in Measures.jl and Dimension.jl define the basic convert()s and operators necessary for common tasks, but additional definitions may be necessary. Please open an issue/PR to add more units or functions to the base module. Please open an issue with a minimal working example if you discover conversion errors.","category":"page"},{"location":"#Comparison-with-other-packages","page":"UnitTypes.jl","title":"Comparison with other packages","text":"","category":"section"},{"location":"#Unitful.jl","page":"UnitTypes.jl","title":"Unitful.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Unitful leverages parametric types to store units, giving flexibility at the cost of compile-time type uncertainty. It's two major limitations are the avoidance of angular measures, as they are not first-class but rather ratios, and rather lengthy type unions that clutter outputs, especially on error:","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"julia> function goSlower(x::T) where T<:Unitful.Acceleration end\ngoSlower (generic function with 1 method)\n\njulia> a = 1u\"mm\"\n\njulia> goSlower(a)\nERROR: MethodError: no method matching goSlower(::Quantity{Int64, ùêã , Unitful.FreeUnits{(mm,), ùêã , nothing}})\n\nClosest candidates are:\n  goSlower(::T) where T<:(Union{Quantity{T, ùêã ùêì^-2, U}, Level{L, S, Quantity{T, ùêã ùêì^-2, U}} where {L, S}} where {T, U}) ","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"As Unitful is the most widely used unit package, we provide a separate package ExchangeUnitful to enable interoperation with Unitful.","category":"page"},{"location":"#DynamicQuantities.jl","page":"UnitTypes.jl","title":"DynamicQuantities.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"DynamicQuantities is newer and faster than Unitful because it \"defines a simple statically-typed Quantity type for storing physical units.\" It does this by storing the exponents on the basic units, allowing any unit traceable to SI to be used. But this performant representation hurts readability, and while the unit representation may be able to be hidden behind overrides of show(), Julia is designed for types to be read and manipulated directly by users.","category":"page"},{"location":"#UnitTypes.jl-2","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"In the presence of Julia's type-heavy UI, these two, good attempts feel misdirected and motivate this package's literal typing of units. The limitation is that UnitTypes does not have a catch-all unit representation. Only units that have been defined by one of the macros may be represented, and complex units may need to have additional methods written to correctly convert between units, ie Celsius to Fahrenheit. See SIDerived.jl and Imperial.jl for examples.","category":"page"},{"location":"#Docs","page":"UnitTypes.jl","title":"Docs","text":"","category":"section"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"CurrentModule=UnitTypes","category":"page"},{"location":"","page":"UnitTypes.jl","title":"UnitTypes.jl","text":"Modules=[UnitTypes]","category":"page"},{"location":"#UnitTypes.APerM","page":"UnitTypes.jl","title":"UnitTypes.APerM","text":"This UnitType represents a basic measure of APerM with units A/m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.APerM2","page":"UnitTypes.jl","title":"UnitTypes.APerM2","text":"This UnitType represents a basic measure of APerM2 with units A/m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Acre","page":"UnitTypes.jl","title":"UnitTypes.Acre","text":"UnitType Acre is a compound unit created by Meter2, related by 4046.873, with supertype AbstractArea, and symbol ac.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ampere","page":"UnitTypes.jl","title":"UnitTypes.Ampere","text":"This UnitType represents a basic measure of Ampere with units A.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Candela","page":"UnitTypes.jl","title":"UnitTypes.Candela","text":"This UnitType represents a basic measure of Candela with units cd.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.CentiMeter","page":"UnitTypes.jl","title":"UnitTypes.CentiMeter","text":"UnitType CentiMeter is a compound unit created by Meter, related by 0.01, with supertype AbstractLength, and symbol cm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Coulomb","page":"UnitTypes.jl","title":"UnitTypes.Coulomb","text":"This UnitType represents a basic measure of Coulomb with units C.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Degree","page":"UnitTypes.jl","title":"UnitTypes.Degree","text":"UnitType Degree is a compound unit created by Radian, related by 0.017453292519943295, with supertype AbstractAngle, and symbol ¬∞.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Farad","page":"UnitTypes.jl","title":"UnitTypes.Farad","text":"This UnitType represents a basic measure of Farad with units F.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Femtometer","page":"UnitTypes.jl","title":"UnitTypes.Femtometer","text":"UnitType Femtometer is a compound unit created by Meter, related by 1.0e-15, with supertype AbstractLength, and symbol fm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.FluidOunce","page":"UnitTypes.jl","title":"UnitTypes.FluidOunce","text":"UnitType FluidOunce is a compound unit created by Meter3, related by 0.0284130625, with supertype AbstractVolume, and symbol floz.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Foot","page":"UnitTypes.jl","title":"UnitTypes.Foot","text":"UnitType Foot is a compound unit created by Meter, related by 0.30479999999999996, with supertype AbstractLength, and symbol ft.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.FootPerSecond","page":"UnitTypes.jl","title":"UnitTypes.FootPerSecond","text":"UnitType FootPerSecond is a compound unit created by MeterPerSecond, related by 0.30479999999999996, with supertype AbstractVelocity, and symbol ft/s.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Gallon","page":"UnitTypes.jl","title":"UnitTypes.Gallon","text":"UnitType Gallon is a compound unit created by Meter3, related by 4.54609, with supertype AbstractVolume, and symbol gal.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.GigaPascal","page":"UnitTypes.jl","title":"UnitTypes.GigaPascal","text":"UnitType GigaPascal is a compound unit created by Pascal, related by 1.0e6, with supertype AbstractPressure, and symbol GPa.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Henry","page":"UnitTypes.jl","title":"UnitTypes.Henry","text":"This UnitType represents a basic measure of Henry with units H.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Hertz","page":"UnitTypes.jl","title":"UnitTypes.Hertz","text":"This UnitType represents a basic measure of Hertz with units Hz.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Hour","page":"UnitTypes.jl","title":"UnitTypes.Hour","text":"UnitType Hour is a compound unit created by Minute, related by 60.0, with supertype AbstractTime, and symbol hr.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Inch","page":"UnitTypes.jl","title":"UnitTypes.Inch","text":"UnitType Inch is a compound unit created by Meter, related by 0.0254, with supertype AbstractLength, and symbol in.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Kelvin","page":"UnitTypes.jl","title":"UnitTypes.Kelvin","text":"This UnitType represents a basic measure of Kelvin with units K.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KgPerM2","page":"UnitTypes.jl","title":"UnitTypes.KgPerM2","text":"This UnitType represents a basic measure of KgPerM2 with units kg/m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KgPerM3","page":"UnitTypes.jl","title":"UnitTypes.KgPerM3","text":"This UnitType represents a basic measure of KgPerM3 with units kg/m^3.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloGram","page":"UnitTypes.jl","title":"UnitTypes.KiloGram","text":"This UnitType represents a basic measure of KiloGram with units kg.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloNewton","page":"UnitTypes.jl","title":"UnitTypes.KiloNewton","text":"UnitType KiloNewton is a compound unit created by Newton, related by 1000.0, with supertype AbstractForce, and symbol kN.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloOhm","page":"UnitTypes.jl","title":"UnitTypes.KiloOhm","text":"UnitType KiloOhm is a compound unit created by Ohm, related by 1000.0, with supertype AbstractResistance, and symbol kŒ©.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloPascal","page":"UnitTypes.jl","title":"UnitTypes.KiloPascal","text":"UnitType KiloPascal is a compound unit created by Pascal, related by 1.0, with supertype AbstractPressure, and symbol KPa.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.KiloVolt","page":"UnitTypes.jl","title":"UnitTypes.KiloVolt","text":"UnitType KiloVolt is a compound unit created by Volt, related by 1000.0, with supertype AbstractElectricPotential, and symbol KV.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Kilometer","page":"UnitTypes.jl","title":"UnitTypes.Kilometer","text":"UnitType Kilometer is a compound unit created by Meter, related by 1000.0, with supertype AbstractLength, and symbol km.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Liter","page":"UnitTypes.jl","title":"UnitTypes.Liter","text":"UnitType Liter is a compound unit created by Meter3, related by 0.001, with supertype AbstractVolume, and symbol L.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Lumen","page":"UnitTypes.jl","title":"UnitTypes.Lumen","text":"This UnitType represents a basic measure of Lumen with units lm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Lux","page":"UnitTypes.jl","title":"UnitTypes.Lux","text":"This UnitType represents a basic measure of Lux with units lx.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.M3PerKg","page":"UnitTypes.jl","title":"UnitTypes.M3PerKg","text":"This UnitType represents a basic measure of M3PerKg with units m^3/kg.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MegaOhm","page":"UnitTypes.jl","title":"UnitTypes.MegaOhm","text":"UnitType MegaOhm is a compound unit created by Ohm, related by 1.0e6, with supertype AbstractResistance, and symbol MŒ©.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MegaPascal","page":"UnitTypes.jl","title":"UnitTypes.MegaPascal","text":"UnitType MegaPascal is a compound unit created by Pascal, related by 1000.0, with supertype AbstractPressure, and symbol MPa.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter","page":"UnitTypes.jl","title":"UnitTypes.Meter","text":"This UnitType represents a basic measure of Meter with units m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter2","page":"UnitTypes.jl","title":"UnitTypes.Meter2","text":"This UnitType represents a basic measure of Meter2 with units m^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Meter3","page":"UnitTypes.jl","title":"UnitTypes.Meter3","text":"This UnitType represents a basic measure of Meter3 with units m^3.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MeterPerSecond","page":"UnitTypes.jl","title":"UnitTypes.MeterPerSecond","text":"This UnitType represents a basic measure of MeterPerSecond with units m/s.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MeterPerSecond2","page":"UnitTypes.jl","title":"UnitTypes.MeterPerSecond2","text":"This UnitType represents a basic measure of MeterPerSecond2 with units m/s^2.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MicroFarad","page":"UnitTypes.jl","title":"UnitTypes.MicroFarad","text":"UnitType MicroFarad is a compound unit created by Farad, related by 1.0e-6, with supertype AbstractCapacitance, and symbol ŒºF.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MicroMeter","page":"UnitTypes.jl","title":"UnitTypes.MicroMeter","text":"UnitType MicroMeter is a compound unit created by Meter, related by 1.0e-6, with supertype AbstractLength, and symbol Œºm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Mile","page":"UnitTypes.jl","title":"UnitTypes.Mile","text":"UnitType Mile is a compound unit created by Meter, related by 1609.3439999999998, with supertype AbstractLength, and symbol mi.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliFarad","page":"UnitTypes.jl","title":"UnitTypes.MilliFarad","text":"UnitType MilliFarad is a compound unit created by Farad, related by 0.001, with supertype AbstractCapacitance, and symbol mF.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliHenry","page":"UnitTypes.jl","title":"UnitTypes.MilliHenry","text":"UnitType MilliHenry is a compound unit created by Henry, related by 0.001, with supertype AbstractInductance, and symbol mH.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliLiter","page":"UnitTypes.jl","title":"UnitTypes.MilliLiter","text":"UnitType MilliLiter is a compound unit created by Liter, related by 0.001, with supertype AbstractVolume, and symbol mL.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliMeter","page":"UnitTypes.jl","title":"UnitTypes.MilliMeter","text":"UnitType MilliMeter is a compound unit created by Meter, related by 0.001, with supertype AbstractLength, and symbol mm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliNewton","page":"UnitTypes.jl","title":"UnitTypes.MilliNewton","text":"UnitType MilliNewton is a compound unit created by Newton, related by 0.001, with supertype AbstractForce, and symbol mN.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliNewtonMeter","page":"UnitTypes.jl","title":"UnitTypes.MilliNewtonMeter","text":"UnitType MilliNewtonMeter is a compound unit created by NewtonMeter, related by 0.001, with supertype AbstractTorque, and symbol mN*m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.MilliOhm","page":"UnitTypes.jl","title":"UnitTypes.MilliOhm","text":"UnitType MilliOhm is a compound unit created by Ohm, related by 0.001, with supertype AbstractResistance, and symbol Œ©.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Minute","page":"UnitTypes.jl","title":"UnitTypes.Minute","text":"UnitType Minute is a compound unit created by Second, related by 60.0, with supertype AbstractTime, and symbol min.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NanoFarad","page":"UnitTypes.jl","title":"UnitTypes.NanoFarad","text":"UnitType NanoFarad is a compound unit created by Farad, related by 1.0e-9, with supertype AbstractCapacitance, and symbol nF.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NanoMeter","page":"UnitTypes.jl","title":"UnitTypes.NanoMeter","text":"UnitType NanoMeter is a compound unit created by Meter, related by 1.0e-9, with supertype AbstractLength, and symbol nm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NauticalMile","page":"UnitTypes.jl","title":"UnitTypes.NauticalMile","text":"UnitType NauticalMile is a compound unit created by Meter, related by 1852.0, with supertype AbstractLength, and symbol nmi.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Newton","page":"UnitTypes.jl","title":"UnitTypes.Newton","text":"This UnitType represents a basic measure of Newton with units N.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NewtonMeter","page":"UnitTypes.jl","title":"UnitTypes.NewtonMeter","text":"This UnitType represents a basic measure of NewtonMeter with units N*m.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.NewtonMilliMeter","page":"UnitTypes.jl","title":"UnitTypes.NewtonMilliMeter","text":"UnitType NewtonMilliMeter is a compound unit created by NewtonMeter, related by 0.001, with supertype AbstractTorque, and symbol N*mm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ohm","page":"UnitTypes.jl","title":"UnitTypes.Ohm","text":"This UnitType represents a basic measure of Ohm with units ‚Ñ¶.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Ounce","page":"UnitTypes.jl","title":"UnitTypes.Ounce","text":"UnitType Ounce is a compound unit created by KiloGram, related by 0.028349523125, with supertype AbstractMass, and symbol oz.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Pascal","page":"UnitTypes.jl","title":"UnitTypes.Pascal","text":"This UnitType represents a basic measure of Pascal with units Pa.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PerSecond","page":"UnitTypes.jl","title":"UnitTypes.PerSecond","text":"UnitType PerSecond is a compound unit created by Hertz, related by 1.0, with supertype AbstractFrequency, and symbol s^-1.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PicoFarad","page":"UnitTypes.jl","title":"UnitTypes.PicoFarad","text":"UnitType PicoFarad is a compound unit created by Farad, related by 1.0e-12, with supertype AbstractCapacitance, and symbol pF.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PicoMeter","page":"UnitTypes.jl","title":"UnitTypes.PicoMeter","text":"UnitType PicoMeter is a compound unit created by Meter, related by 1.0e-12, with supertype AbstractLength, and symbol pm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Pint","page":"UnitTypes.jl","title":"UnitTypes.Pint","text":"UnitType Pint is a compound unit created by Meter3, related by 0.56826126, with supertype AbstractVolume, and symbol pt.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.PoundMass","page":"UnitTypes.jl","title":"UnitTypes.PoundMass","text":"UnitType PoundMass is a compound unit created by KiloGram, related by 0.45359237, with supertype AbstractMass, and symbol lbm.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Quart","page":"UnitTypes.jl","title":"UnitTypes.Quart","text":"UnitType Quart is a compound unit created by Meter3, related by 1.1365225, with supertype AbstractVolume, and symbol qt.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Radian","page":"UnitTypes.jl","title":"UnitTypes.Radian","text":"This UnitType represents a basic measure of Radian with units rad.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Second","page":"UnitTypes.jl","title":"UnitTypes.Second","text":"This UnitType represents a basic measure of Second with units s.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Siemens","page":"UnitTypes.jl","title":"UnitTypes.Siemens","text":"This UnitType represents a basic measure of Siemens with units ‚Ñ¶^-1.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Slug","page":"UnitTypes.jl","title":"UnitTypes.Slug","text":"UnitType Slug is a compound unit created by KiloGram, related by 14.59390294, with supertype AbstractMass, and symbol slug.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.SquareFoot","page":"UnitTypes.jl","title":"UnitTypes.SquareFoot","text":"UnitType SquareFoot is a compound unit created by Meter2, related by 0.09290303999999998, with supertype AbstractArea, and symbol sqft.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.SquareMile","page":"UnitTypes.jl","title":"UnitTypes.SquareMile","text":"UnitType SquareMile is a compound unit created by Meter2, related by 2.5899881103359996e6, with supertype AbstractArea, and symbol sqmi.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Tesla","page":"UnitTypes.jl","title":"UnitTypes.Tesla","text":"This UnitType represents a basic measure of Tesla with units T.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Volt","page":"UnitTypes.jl","title":"UnitTypes.Volt","text":"This UnitType represents a basic measure of Volt with units V.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Watt","page":"UnitTypes.jl","title":"UnitTypes.Watt","text":"This UnitType represents a basic measure of Watt with units W.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Weber","page":"UnitTypes.jl","title":"UnitTypes.Weber","text":"This UnitType represents a basic measure of Weber with units Wb.\n\n\n\n\n\n","category":"type"},{"location":"#UnitTypes.Yard","page":"UnitTypes.jl","title":"UnitTypes.Yard","text":"UnitType Yard is a compound unit created by Meter, related by 0.9143999999999999, with supertype AbstractLength, and symbol yd.\n\n\n\n\n\n","category":"type"},{"location":"#Base.show-Union{Tuple{T}, Tuple{IO, T}} where T<:AbstractDimension","page":"UnitTypes.jl","title":"Base.show","text":"@show functionality for Dimensions via dimension2String().\n\n\n\n\n\n","category":"method"},{"location":"#UnitTypes.dimension2String-Tuple{T} where T<:AbstractDimension","page":"UnitTypes.jl","title":"UnitTypes.dimension2String","text":"dimension2String(c::AbstractDimension) -> String\n\n\nReturns a string representing dimenson c with format Module.DimensionName(value unit).\n\n\n\n\n\n","category":"method"},{"location":"#UnitTypes.@makeDimension-Tuple{Any, Any}","page":"UnitTypes.jl","title":"UnitTypes.@makeDimension","text":"Make a new dimension dimName of measure; also creates 'AbstractdimName'\n\n```julia\n\n@makeDimension Diameter Meter \n\nd = Diameter(MilliMeter(3.4))\nr = Radius(d)\n\n```\n\n\n\n\n\n","category":"macro"},{"location":"#UnitTypes.@relateDimensions-Tuple{Any}","page":"UnitTypes.jl","title":"UnitTypes.@relateDimensions","text":"Defines various Base. functions that facilitate the given relationship.   All types must already be defined and written in the form type1 = factor * type2, as in:   julia     @relateDimensions Diameter = 2.0*Radius\n\n\n\n\n\n","category":"macro"}]
}
